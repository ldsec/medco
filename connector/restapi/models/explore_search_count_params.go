// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExploreSearchCountParams explore search count params
//
// swagger:model exploreSearchCountParams
type ExploreSearchCountParams struct {

	// query ID
	// Required: true
	// Pattern: ^[\w:-]+$
	QueryID *string `json:"queryID"`

	// user public key
	// Required: true
	// Pattern: ^[\w=-]+$
	UserPublicKey *string `json:"userPublicKey"`
}

// Validate validates this explore search count params
func (m *ExploreSearchCountParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExploreSearchCountParams) validateQueryID(formats strfmt.Registry) error {

	if err := validate.Required("queryID", "body", m.QueryID); err != nil {
		return err
	}

	if err := validate.Pattern("queryID", "body", string(*m.QueryID), `^[\w:-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ExploreSearchCountParams) validateUserPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("userPublicKey", "body", m.UserPublicKey); err != nil {
		return err
	}

	if err := validate.Pattern("userPublicKey", "body", string(*m.UserPublicKey), `^[\w=-]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreSearchCountParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreSearchCountParams) UnmarshalBinary(b []byte) error {
	var res ExploreSearchCountParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
