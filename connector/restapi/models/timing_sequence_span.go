// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimingSequenceSpan timing sequence span
//
// swagger:model timingSequenceSpan
type TimingSequenceSpan struct {

	// operator
	// Required: true
	// Enum: [LESS LESSEQUAL EQUAL GREATEREQUAL GREATER]
	Operator *string `json:"operator"`

	// units
	// Required: true
	// Enum: [HOUR DAY MONTH YEAR]
	Units *string `json:"units"`

	// value
	// Required: true
	Value *int64 `json:"value"`
}

// Validate validates this timing sequence span
func (m *TimingSequenceSpan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timingSequenceSpanTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LESS","LESSEQUAL","EQUAL","GREATEREQUAL","GREATER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timingSequenceSpanTypeOperatorPropEnum = append(timingSequenceSpanTypeOperatorPropEnum, v)
	}
}

const (

	// TimingSequenceSpanOperatorLESS captures enum value "LESS"
	TimingSequenceSpanOperatorLESS string = "LESS"

	// TimingSequenceSpanOperatorLESSEQUAL captures enum value "LESSEQUAL"
	TimingSequenceSpanOperatorLESSEQUAL string = "LESSEQUAL"

	// TimingSequenceSpanOperatorEQUAL captures enum value "EQUAL"
	TimingSequenceSpanOperatorEQUAL string = "EQUAL"

	// TimingSequenceSpanOperatorGREATEREQUAL captures enum value "GREATEREQUAL"
	TimingSequenceSpanOperatorGREATEREQUAL string = "GREATEREQUAL"

	// TimingSequenceSpanOperatorGREATER captures enum value "GREATER"
	TimingSequenceSpanOperatorGREATER string = "GREATER"
)

// prop value enum
func (m *TimingSequenceSpan) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timingSequenceSpanTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimingSequenceSpan) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

var timingSequenceSpanTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOUR","DAY","MONTH","YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timingSequenceSpanTypeUnitsPropEnum = append(timingSequenceSpanTypeUnitsPropEnum, v)
	}
}

const (

	// TimingSequenceSpanUnitsHOUR captures enum value "HOUR"
	TimingSequenceSpanUnitsHOUR string = "HOUR"

	// TimingSequenceSpanUnitsDAY captures enum value "DAY"
	TimingSequenceSpanUnitsDAY string = "DAY"

	// TimingSequenceSpanUnitsMONTH captures enum value "MONTH"
	TimingSequenceSpanUnitsMONTH string = "MONTH"

	// TimingSequenceSpanUnitsYEAR captures enum value "YEAR"
	TimingSequenceSpanUnitsYEAR string = "YEAR"
)

// prop value enum
func (m *TimingSequenceSpan) validateUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timingSequenceSpanTypeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimingSequenceSpan) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("units", "body", m.Units); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitsEnum("units", "body", *m.Units); err != nil {
		return err
	}

	return nil
}

func (m *TimingSequenceSpan) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimingSequenceSpan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimingSequenceSpan) UnmarshalBinary(b []byte) error {
	var res TimingSequenceSpan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
