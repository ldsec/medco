// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntervalBucket Explore statistics encrypted bucket of the histogram
//
// swagger:model intervalBucket
type IntervalBucket struct {

	// The encrypted count for this bucket
	// Required: true
	EncCount *string `json:"encCount"`

	// higher bound
	// Required: true
	HigherBound *string `json:"higherBound"`

	// lower bound
	// Required: true
	LowerBound *string `json:"lowerBound"`
}

// Validate validates this interval bucket
func (m *IntervalBucket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigherBound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowerBound(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntervalBucket) validateEncCount(formats strfmt.Registry) error {

	if err := validate.Required("encCount", "body", m.EncCount); err != nil {
		return err
	}

	return nil
}

func (m *IntervalBucket) validateHigherBound(formats strfmt.Registry) error {

	if err := validate.Required("higherBound", "body", m.HigherBound); err != nil {
		return err
	}

	return nil
}

func (m *IntervalBucket) validateLowerBound(formats strfmt.Registry) error {

	if err := validate.Required("lowerBound", "body", m.LowerBound); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntervalBucket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntervalBucket) UnmarshalBinary(b []byte) error {
	var res IntervalBucket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
