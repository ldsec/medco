// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Metadataxml metadataxml
//
// swagger:model metadataxml
type Metadataxml struct {

	// value metadata
	ValueMetadata *MetadataxmlValueMetadata `json:"ValueMetadata,omitempty"`
}

// Validate validates this metadataxml
func (m *Metadataxml) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValueMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metadataxml) validateValueMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueMetadata) { // not required
		return nil
	}

	if m.ValueMetadata != nil {
		if err := m.ValueMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ValueMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metadataxml) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metadataxml) UnmarshalBinary(b []byte) error {
	var res Metadataxml
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetadataxmlValueMetadata metadataxml value metadata
//
// swagger:model MetadataxmlValueMetadata
type MetadataxmlValueMetadata struct {

	// children encrypt i ds
	ChildrenEncryptIDs string `json:"ChildrenEncryptIDs,omitempty"`

	// creation date time
	CreationDateTime string `json:"CreationDateTime,omitempty"`

	// data type
	DataType string `json:"DataType,omitempty"`

	// encrypted type
	EncryptedType string `json:"EncryptedType,omitempty"`

	// enum values
	EnumValues string `json:"EnumValues,omitempty"`

	// flagstouse
	Flagstouse string `json:"Flagstouse,omitempty"`

	// node encrypt ID
	NodeEncryptID string `json:"NodeEncryptID,omitempty"`

	// oktousevalues
	Oktousevalues string `json:"Oktousevalues,omitempty"`

	// test ID
	TestID string `json:"TestID,omitempty"`

	// test name
	TestName string `json:"TestName,omitempty"`

	// unit values
	UnitValues []*UnitValues `json:"UnitValues"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this metadataxml value metadata
func (m *MetadataxmlValueMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnitValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataxmlValueMetadata) validateUnitValues(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitValues) { // not required
		return nil
	}

	for i := 0; i < len(m.UnitValues); i++ {
		if swag.IsZero(m.UnitValues[i]) { // not required
			continue
		}

		if m.UnitValues[i] != nil {
			if err := m.UnitValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ValueMetadata" + "." + "UnitValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataxmlValueMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataxmlValueMetadata) UnmarshalBinary(b []byte) error {
	var res MetadataxmlValueMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
