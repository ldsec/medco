// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Panel collection of i2b2 items (linked by OR)
//
// swagger:model panel
type Panel struct {

	// items containing i2b2 concepts (and optionally modifiers)
	ConceptItems []*PanelConceptItemsItems0 `json:"conceptItems"`

	// exclude the i2b2 panel
	// Required: true
	Not *bool `json:"not"`

	// panel timing
	PanelTiming Timing `json:"panelTiming,omitempty"`

	// items containing patient set IDs
	PatientSetIDItems []int64 `json:"patientSetIDItems"`
}

// Validate validates this panel
func (m *Panel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConceptItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelTiming(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Panel) validateConceptItems(formats strfmt.Registry) error {

	if swag.IsZero(m.ConceptItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ConceptItems); i++ {
		if swag.IsZero(m.ConceptItems[i]) { // not required
			continue
		}

		if m.ConceptItems[i] != nil {
			if err := m.ConceptItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conceptItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Panel) validateNot(formats strfmt.Registry) error {

	if err := validate.Required("not", "body", m.Not); err != nil {
		return err
	}

	return nil
}

func (m *Panel) validatePanelTiming(formats strfmt.Registry) error {

	if swag.IsZero(m.PanelTiming) { // not required
		return nil
	}

	if err := m.PanelTiming.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("panelTiming")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Panel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Panel) UnmarshalBinary(b []byte) error {
	var res Panel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PanelConceptItemsItems0 panel concept items items0
//
// swagger:model PanelConceptItemsItems0
type PanelConceptItemsItems0 struct {

	// encrypted
	// Required: true
	Encrypted *bool `json:"encrypted"`

	// modifier
	Modifier *PanelConceptItemsItems0Modifier `json:"modifier,omitempty"`

	// # NUMBER operators EQ: equal NE: not equal GT: greater than GE: greater than or equal LT: less than LE: less than or equal BETWEEN: between (value syntax: "x and y") # TEXT operators IN: in (value syntax: "'x','y','z'") LIKE[exact]: equal LIKE[begin]: begins with LIKE[end]: ends with LIKE[contains]: contains
	//
	// Enum: [EQ NE GT GE LT LE BETWEEN IN LIKE[exact] LIKE[begin] LIKE[end] LIKE[contains]]
	Operator string `json:"operator,omitempty"`

	// query term
	// Required: true
	// Pattern: ^([\w=-]+)$|^((\/[^\/]+)+\/)$
	QueryTerm *string `json:"queryTerm"`

	// type
	// Enum: [NUMBER TEXT]
	Type string `json:"type,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this panel concept items items0
func (m *PanelConceptItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncrypted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelConceptItemsItems0) validateEncrypted(formats strfmt.Registry) error {

	if err := validate.Required("encrypted", "body", m.Encrypted); err != nil {
		return err
	}

	return nil
}

func (m *PanelConceptItemsItems0) validateModifier(formats strfmt.Registry) error {

	if swag.IsZero(m.Modifier) { // not required
		return nil
	}

	if m.Modifier != nil {
		if err := m.Modifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifier")
			}
			return err
		}
	}

	return nil
}

var panelConceptItemsItems0TypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQ","NE","GT","GE","LT","LE","BETWEEN","IN","LIKE[exact]","LIKE[begin]","LIKE[end]","LIKE[contains]"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		panelConceptItemsItems0TypeOperatorPropEnum = append(panelConceptItemsItems0TypeOperatorPropEnum, v)
	}
}

const (

	// PanelConceptItemsItems0OperatorEQ captures enum value "EQ"
	PanelConceptItemsItems0OperatorEQ string = "EQ"

	// PanelConceptItemsItems0OperatorNE captures enum value "NE"
	PanelConceptItemsItems0OperatorNE string = "NE"

	// PanelConceptItemsItems0OperatorGT captures enum value "GT"
	PanelConceptItemsItems0OperatorGT string = "GT"

	// PanelConceptItemsItems0OperatorGE captures enum value "GE"
	PanelConceptItemsItems0OperatorGE string = "GE"

	// PanelConceptItemsItems0OperatorLT captures enum value "LT"
	PanelConceptItemsItems0OperatorLT string = "LT"

	// PanelConceptItemsItems0OperatorLE captures enum value "LE"
	PanelConceptItemsItems0OperatorLE string = "LE"

	// PanelConceptItemsItems0OperatorBETWEEN captures enum value "BETWEEN"
	PanelConceptItemsItems0OperatorBETWEEN string = "BETWEEN"

	// PanelConceptItemsItems0OperatorIN captures enum value "IN"
	PanelConceptItemsItems0OperatorIN string = "IN"

	// PanelConceptItemsItems0OperatorLIKEExact captures enum value "LIKE[exact]"
	PanelConceptItemsItems0OperatorLIKEExact string = "LIKE[exact]"

	// PanelConceptItemsItems0OperatorLIKEBegin captures enum value "LIKE[begin]"
	PanelConceptItemsItems0OperatorLIKEBegin string = "LIKE[begin]"

	// PanelConceptItemsItems0OperatorLIKEEnd captures enum value "LIKE[end]"
	PanelConceptItemsItems0OperatorLIKEEnd string = "LIKE[end]"

	// PanelConceptItemsItems0OperatorLIKEContains captures enum value "LIKE[contains]"
	PanelConceptItemsItems0OperatorLIKEContains string = "LIKE[contains]"
)

// prop value enum
func (m *PanelConceptItemsItems0) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, panelConceptItemsItems0TypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PanelConceptItemsItems0) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *PanelConceptItemsItems0) validateQueryTerm(formats strfmt.Registry) error {

	if err := validate.Required("queryTerm", "body", m.QueryTerm); err != nil {
		return err
	}

	if err := validate.Pattern("queryTerm", "body", string(*m.QueryTerm), `^([\w=-]+)$|^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

var panelConceptItemsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NUMBER","TEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		panelConceptItemsItems0TypeTypePropEnum = append(panelConceptItemsItems0TypeTypePropEnum, v)
	}
}

const (

	// PanelConceptItemsItems0TypeNUMBER captures enum value "NUMBER"
	PanelConceptItemsItems0TypeNUMBER string = "NUMBER"

	// PanelConceptItemsItems0TypeTEXT captures enum value "TEXT"
	PanelConceptItemsItems0TypeTEXT string = "TEXT"
)

// prop value enum
func (m *PanelConceptItemsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, panelConceptItemsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PanelConceptItemsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PanelConceptItemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PanelConceptItemsItems0) UnmarshalBinary(b []byte) error {
	var res PanelConceptItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PanelConceptItemsItems0Modifier panel concept items items0 modifier
//
// swagger:model PanelConceptItemsItems0Modifier
type PanelConceptItemsItems0Modifier struct {

	// applied path
	// Required: true
	// Pattern: ^((\/[^\/]+)+\/%?)$
	AppliedPath *string `json:"appliedPath"`

	// modifier key
	// Required: true
	// Pattern: ^((\/[^\/]+)+\/)$
	ModifierKey *string `json:"modifierKey"`
}

// Validate validates this panel concept items items0 modifier
func (m *PanelConceptItemsItems0Modifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifierKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelConceptItemsItems0Modifier) validateAppliedPath(formats strfmt.Registry) error {

	if err := validate.Required("modifier"+"."+"appliedPath", "body", m.AppliedPath); err != nil {
		return err
	}

	if err := validate.Pattern("modifier"+"."+"appliedPath", "body", string(*m.AppliedPath), `^((\/[^\/]+)+\/%?)$`); err != nil {
		return err
	}

	return nil
}

func (m *PanelConceptItemsItems0Modifier) validateModifierKey(formats strfmt.Registry) error {

	if err := validate.Required("modifier"+"."+"modifierKey", "body", m.ModifierKey); err != nil {
		return err
	}

	if err := validate.Pattern("modifier"+"."+"modifierKey", "body", string(*m.ModifierKey), `^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PanelConceptItemsItems0Modifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PanelConceptItemsItems0Modifier) UnmarshalBinary(b []byte) error {
	var res PanelConceptItemsItems0Modifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
