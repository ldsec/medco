// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExploreQueryResultElement explore query result element
//
// swagger:model exploreQueryResultElement
type ExploreQueryResultElement struct {

	// encrypted count
	EncryptedCount string `json:"encryptedCount,omitempty"`

	// encrypted patient list
	EncryptedPatientList []string `json:"encryptedPatientList"`

	// patient set ID
	PatientSetID int64 `json:"patientSetID,omitempty"`

	// query ID
	QueryID int64 `json:"queryID,omitempty"`

	// status
	// Enum: [queued pending error available]
	Status string `json:"status,omitempty"`

	// timers
	Timers Timers `json:"timers,omitempty"`
}

// Validate validates this explore query result element
func (m *ExploreQueryResultElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exploreQueryResultElementTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","pending","error","available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exploreQueryResultElementTypeStatusPropEnum = append(exploreQueryResultElementTypeStatusPropEnum, v)
	}
}

const (

	// ExploreQueryResultElementStatusQueued captures enum value "queued"
	ExploreQueryResultElementStatusQueued string = "queued"

	// ExploreQueryResultElementStatusPending captures enum value "pending"
	ExploreQueryResultElementStatusPending string = "pending"

	// ExploreQueryResultElementStatusError captures enum value "error"
	ExploreQueryResultElementStatusError string = "error"

	// ExploreQueryResultElementStatusAvailable captures enum value "available"
	ExploreQueryResultElementStatusAvailable string = "available"
)

// prop value enum
func (m *ExploreQueryResultElement) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exploreQueryResultElementTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExploreQueryResultElement) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ExploreQueryResultElement) validateTimers(formats strfmt.Registry) error {

	if swag.IsZero(m.Timers) { // not required
		return nil
	}

	if err := m.Timers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreQueryResultElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreQueryResultElement) UnmarshalBinary(b []byte) error {
	var res ExploreQueryResultElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
