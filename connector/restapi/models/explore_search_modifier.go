// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExploreSearchModifier explore search modifier
//
// swagger:model exploreSearchModifier
type ExploreSearchModifier struct {

	// applied concept
	// Required: true
	// Pattern: ^\/$|^((\/[^\/]+)+\/)$
	AppliedConcept *string `json:"appliedConcept"`

	// applied path
	// Required: true
	// Pattern: ^\/$|^((\/[^\/]+)+\/%?)$
	AppliedPath *string `json:"appliedPath"`

	// operation
	// Required: true
	// Enum: [info children]
	Operation *string `json:"operation"`

	// path
	// Required: true
	// Pattern: ^\/$|^((\/[^\/]+)+\/)$
	Path *string `json:"path"`

	// subject count query info
	SubjectCountQueryInfo *ExploreSearchCountParams `json:"subjectCountQueryInfo,omitempty"`
}

// Validate validates this explore search modifier
func (m *ExploreSearchModifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedConcept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectCountQueryInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExploreSearchModifier) validateAppliedConcept(formats strfmt.Registry) error {

	if err := validate.Required("appliedConcept", "body", m.AppliedConcept); err != nil {
		return err
	}

	if err := validate.Pattern("appliedConcept", "body", string(*m.AppliedConcept), `^\/$|^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

func (m *ExploreSearchModifier) validateAppliedPath(formats strfmt.Registry) error {

	if err := validate.Required("appliedPath", "body", m.AppliedPath); err != nil {
		return err
	}

	if err := validate.Pattern("appliedPath", "body", string(*m.AppliedPath), `^\/$|^((\/[^\/]+)+\/%?)$`); err != nil {
		return err
	}

	return nil
}

var exploreSearchModifierTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["info","children"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exploreSearchModifierTypeOperationPropEnum = append(exploreSearchModifierTypeOperationPropEnum, v)
	}
}

const (

	// ExploreSearchModifierOperationInfo captures enum value "info"
	ExploreSearchModifierOperationInfo string = "info"

	// ExploreSearchModifierOperationChildren captures enum value "children"
	ExploreSearchModifierOperationChildren string = "children"
)

// prop value enum
func (m *ExploreSearchModifier) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exploreSearchModifierTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExploreSearchModifier) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *ExploreSearchModifier) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	if err := validate.Pattern("path", "body", string(*m.Path), `^\/$|^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

func (m *ExploreSearchModifier) validateSubjectCountQueryInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.SubjectCountQueryInfo) { // not required
		return nil
	}

	if m.SubjectCountQueryInfo != nil {
		if err := m.SubjectCountQueryInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subjectCountQueryInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreSearchModifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreSearchModifier) UnmarshalBinary(b []byte) error {
	var res ExploreSearchModifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
