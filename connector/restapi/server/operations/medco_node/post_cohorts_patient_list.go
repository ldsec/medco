// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ldsec/medco/connector/restapi/models"
)

// PostCohortsPatientListHandlerFunc turns a function with the right signature into a post cohorts patient list handler
type PostCohortsPatientListHandlerFunc func(PostCohortsPatientListParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCohortsPatientListHandlerFunc) Handle(params PostCohortsPatientListParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PostCohortsPatientListHandler interface for that can handle valid post cohorts patient list params
type PostCohortsPatientListHandler interface {
	Handle(PostCohortsPatientListParams, *models.User) middleware.Responder
}

// NewPostCohortsPatientList creates a new http.Handler for the post cohorts patient list operation
func NewPostCohortsPatientList(ctx *middleware.Context, handler PostCohortsPatientListHandler) *PostCohortsPatientList {
	return &PostCohortsPatientList{Context: ctx, Handler: handler}
}

/*PostCohortsPatientList swagger:route POST /node/explore/cohorts/patient-list medco-node postCohortsPatientList

Retrieve the encrypted patient list for a given cohort name

*/
type PostCohortsPatientList struct {
	Context *middleware.Context
	Handler PostCohortsPatientListHandler
}

func (o *PostCohortsPatientList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostCohortsPatientListParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCohortsPatientListBody post cohorts patient list body
//
// swagger:model PostCohortsPatientListBody
type PostCohortsPatientListBody struct {

	// cohort name
	// Required: true
	// Pattern: ^\w+$
	CohortName *string `json:"cohortName"`

	// id
	// Pattern: ^[\w:-]+$
	ID string `json:"id,omitempty"`

	// user public key
	// Required: true
	// Pattern: ^[\w=-]+$
	UserPublicKey *string `json:"userPublicKey"`
}

// Validate validates this post cohorts patient list body
func (o *PostCohortsPatientListBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCohortName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCohortsPatientListBody) validateCohortName(formats strfmt.Registry) error {

	if err := validate.Required("cohortsPatientListRequest"+"."+"cohortName", "body", o.CohortName); err != nil {
		return err
	}

	if err := validate.Pattern("cohortsPatientListRequest"+"."+"cohortName", "body", string(*o.CohortName), `^\w+$`); err != nil {
		return err
	}

	return nil
}

func (o *PostCohortsPatientListBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.Pattern("cohortsPatientListRequest"+"."+"id", "body", string(o.ID), `^[\w:-]+$`); err != nil {
		return err
	}

	return nil
}

func (o *PostCohortsPatientListBody) validateUserPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("cohortsPatientListRequest"+"."+"userPublicKey", "body", o.UserPublicKey); err != nil {
		return err
	}

	if err := validate.Pattern("cohortsPatientListRequest"+"."+"userPublicKey", "body", string(*o.UserPublicKey), `^[\w=-]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCohortsPatientListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCohortsPatientListBody) UnmarshalBinary(b []byte) error {
	var res PostCohortsPatientListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCohortsPatientListDefaultBody post cohorts patient list default body
//
// swagger:model PostCohortsPatientListDefaultBody
type PostCohortsPatientListDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post cohorts patient list default body
func (o *PostCohortsPatientListDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCohortsPatientListDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCohortsPatientListDefaultBody) UnmarshalBinary(b []byte) error {
	var res PostCohortsPatientListDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCohortsPatientListForbiddenBody post cohorts patient list forbidden body
//
// swagger:model PostCohortsPatientListForbiddenBody
type PostCohortsPatientListForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post cohorts patient list forbidden body
func (o *PostCohortsPatientListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCohortsPatientListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCohortsPatientListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostCohortsPatientListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCohortsPatientListNotFoundBody post cohorts patient list not found body
//
// swagger:model PostCohortsPatientListNotFoundBody
type PostCohortsPatientListNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post cohorts patient list not found body
func (o *PostCohortsPatientListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostCohortsPatientListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCohortsPatientListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostCohortsPatientListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostCohortsPatientListOKBody post cohorts patient list o k body
//
// swagger:model PostCohortsPatientListOKBody
type PostCohortsPatientListOKBody struct {

	// results
	Results []string `json:"results"`

	// timers
	Timers models.Timers `json:"timers"`
}

// Validate validates this post cohorts patient list o k body
func (o *PostCohortsPatientListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCohortsPatientListOKBody) validateTimers(formats strfmt.Registry) error {

	if swag.IsZero(o.Timers) { // not required
		return nil
	}

	if err := o.Timers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postCohortsPatientListOK" + "." + "timers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCohortsPatientListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCohortsPatientListOKBody) UnmarshalBinary(b []byte) error {
	var res PostCohortsPatientListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
