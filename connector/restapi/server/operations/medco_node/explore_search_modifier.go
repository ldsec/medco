// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// ExploreSearchModifierHandlerFunc turns a function with the right signature into a explore search modifier handler
type ExploreSearchModifierHandlerFunc func(ExploreSearchModifierParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn ExploreSearchModifierHandlerFunc) Handle(params ExploreSearchModifierParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// ExploreSearchModifierHandler interface for that can handle valid explore search modifier params
type ExploreSearchModifierHandler interface {
	Handle(ExploreSearchModifierParams, *models.User) middleware.Responder
}

// NewExploreSearchModifier creates a new http.Handler for the explore search modifier operation
func NewExploreSearchModifier(ctx *middleware.Context, handler ExploreSearchModifierHandler) *ExploreSearchModifier {
	return &ExploreSearchModifier{Context: ctx, Handler: handler}
}

/*ExploreSearchModifier swagger:route POST /node/explore/search/modifier medco-node exploreSearchModifier

Returns info about the modifier and its children.

*/
type ExploreSearchModifier struct {
	Context *middleware.Context
	Handler ExploreSearchModifierHandler
}

func (o *ExploreSearchModifier) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewExploreSearchModifierParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ExploreSearchModifierDefaultBody explore search modifier default body
//
// swagger:model ExploreSearchModifierDefaultBody
type ExploreSearchModifierDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this explore search modifier default body
func (o *ExploreSearchModifierDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExploreSearchModifierDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreSearchModifierDefaultBody) UnmarshalBinary(b []byte) error {
	var res ExploreSearchModifierDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ExploreSearchModifierOKBody explore search modifier o k body
//
// swagger:model ExploreSearchModifierOKBody
type ExploreSearchModifierOKBody struct {

	// results
	Results []*models.ExploreSearchResultElement `json:"results"`

	// search
	Search *models.ExploreSearchModifier `json:"search,omitempty"`
}

// Validate validates this explore search modifier o k body
func (o *ExploreSearchModifierOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExploreSearchModifierOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exploreSearchModifierOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ExploreSearchModifierOKBody) validateSearch(formats strfmt.Registry) error {

	if swag.IsZero(o.Search) { // not required
		return nil
	}

	if o.Search != nil {
		if err := o.Search.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploreSearchModifierOK" + "." + "search")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExploreSearchModifierOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreSearchModifierOKBody) UnmarshalBinary(b []byte) error {
	var res ExploreSearchModifierOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
