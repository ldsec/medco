// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ldsec/medco/connector/restapi/models"
)

// PutCohortsHandlerFunc turns a function with the right signature into a put cohorts handler
type PutCohortsHandlerFunc func(PutCohortsParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCohortsHandlerFunc) Handle(params PutCohortsParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PutCohortsHandler interface for that can handle valid put cohorts params
type PutCohortsHandler interface {
	Handle(PutCohortsParams, *models.User) middleware.Responder
}

// NewPutCohorts creates a new http.Handler for the put cohorts operation
func NewPutCohorts(ctx *middleware.Context, handler PutCohortsHandler) *PutCohorts {
	return &PutCohorts{Context: ctx, Handler: handler}
}

/*PutCohorts swagger:route PUT /node/explore/cohorts/{name} medco-node putCohorts

Update a cohort

*/
type PutCohorts struct {
	Context *middleware.Context
	Handler PutCohortsHandler
}

func (o *PutCohorts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutCohortsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutCohortsBadRequestBody put cohorts bad request body
//
// swagger:model PutCohortsBadRequestBody
type PutCohortsBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put cohorts bad request body
func (o *PutCohortsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCohortsBody put cohorts body
//
// swagger:model PutCohortsBody
type PutCohortsBody struct {

	// creation date
	// Required: true
	CreationDate *string `json:"creationDate"`

	// query ID
	// Required: true
	QueryID *int64 `json:"queryID"`

	// update date
	// Required: true
	UpdateDate *string `json:"updateDate"`
}

// Validate validates this put cohorts body
func (o *PutCohortsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQueryID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutCohortsBody) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("cohortsRequest"+"."+"creationDate", "body", o.CreationDate); err != nil {
		return err
	}

	return nil
}

func (o *PutCohortsBody) validateQueryID(formats strfmt.Registry) error {

	if err := validate.Required("cohortsRequest"+"."+"queryID", "body", o.QueryID); err != nil {
		return err
	}

	return nil
}

func (o *PutCohortsBody) validateUpdateDate(formats strfmt.Registry) error {

	if err := validate.Required("cohortsRequest"+"."+"updateDate", "body", o.UpdateDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCohortsConflictBody put cohorts conflict body
//
// swagger:model PutCohortsConflictBody
type PutCohortsConflictBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put cohorts conflict body
func (o *PutCohortsConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsConflictBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCohortsDefaultBody put cohorts default body
//
// swagger:model PutCohortsDefaultBody
type PutCohortsDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put cohorts default body
func (o *PutCohortsDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsDefaultBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCohortsForbiddenBody put cohorts forbidden body
//
// swagger:model PutCohortsForbiddenBody
type PutCohortsForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put cohorts forbidden body
func (o *PutCohortsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCohortsNotFoundBody put cohorts not found body
//
// swagger:model PutCohortsNotFoundBody
type PutCohortsNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put cohorts not found body
func (o *PutCohortsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
