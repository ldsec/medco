// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// PutDefaultCohortHandlerFunc turns a function with the right signature into a put default cohort handler
type PutDefaultCohortHandlerFunc func(PutDefaultCohortParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDefaultCohortHandlerFunc) Handle(params PutDefaultCohortParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PutDefaultCohortHandler interface for that can handle valid put default cohort params
type PutDefaultCohortHandler interface {
	Handle(PutDefaultCohortParams, *models.User) middleware.Responder
}

// NewPutDefaultCohort creates a new http.Handler for the put default cohort operation
func NewPutDefaultCohort(ctx *middleware.Context, handler PutDefaultCohortHandler) *PutDefaultCohort {
	return &PutDefaultCohort{Context: ctx, Handler: handler}
}

/*PutDefaultCohort swagger:route PUT /node/explore/default-cohort/{name} medco-node putDefaultCohort

Change the default cohort of the user

*/
type PutDefaultCohort struct {
	Context *middleware.Context
	Handler PutDefaultCohortHandler
}

func (o *PutDefaultCohort) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutDefaultCohortParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutDefaultCohortDefaultBody put default cohort default body
//
// swagger:model PutDefaultCohortDefaultBody
type PutDefaultCohortDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put default cohort default body
func (o *PutDefaultCohortDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDefaultCohortDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDefaultCohortDefaultBody) UnmarshalBinary(b []byte) error {
	var res PutDefaultCohortDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutDefaultCohortNotFoundBody put default cohort not found body
//
// swagger:model PutDefaultCohortNotFoundBody
type PutDefaultCohortNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put default cohort not found body
func (o *PutDefaultCohortNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDefaultCohortNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDefaultCohortNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutDefaultCohortNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
