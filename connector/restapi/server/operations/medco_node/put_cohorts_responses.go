// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutCohortsOKCode is the HTTP code returned for type PutCohortsOK
const PutCohortsOKCode int = 200

/*PutCohortsOK Updated cohort

swagger:response putCohortsOK
*/
type PutCohortsOK struct {
}

// NewPutCohortsOK creates PutCohortsOK with default headers values
func NewPutCohortsOK() *PutCohortsOK {

	return &PutCohortsOK{}
}

// WriteResponse to the client
func (o *PutCohortsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutCohortsBadRequestCode is the HTTP code returned for type PutCohortsBadRequest
const PutCohortsBadRequestCode int = 400

/*PutCohortsBadRequest Bad user input in request.

swagger:response putCohortsBadRequest
*/
type PutCohortsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PutCohortsBadRequestBody `json:"body,omitempty"`
}

// NewPutCohortsBadRequest creates PutCohortsBadRequest with default headers values
func NewPutCohortsBadRequest() *PutCohortsBadRequest {

	return &PutCohortsBadRequest{}
}

// WithPayload adds the payload to the put cohorts bad request response
func (o *PutCohortsBadRequest) WithPayload(payload *PutCohortsBadRequestBody) *PutCohortsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put cohorts bad request response
func (o *PutCohortsBadRequest) SetPayload(payload *PutCohortsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCohortsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCohortsForbiddenCode is the HTTP code returned for type PutCohortsForbidden
const PutCohortsForbiddenCode int = 403

/*PutCohortsForbidden Request is valid and user is authenticated, but not authorized to perform this action.

swagger:response putCohortsForbidden
*/
type PutCohortsForbidden struct {

	/*
	  In: Body
	*/
	Payload *PutCohortsForbiddenBody `json:"body,omitempty"`
}

// NewPutCohortsForbidden creates PutCohortsForbidden with default headers values
func NewPutCohortsForbidden() *PutCohortsForbidden {

	return &PutCohortsForbidden{}
}

// WithPayload adds the payload to the put cohorts forbidden response
func (o *PutCohortsForbidden) WithPayload(payload *PutCohortsForbiddenBody) *PutCohortsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put cohorts forbidden response
func (o *PutCohortsForbidden) SetPayload(payload *PutCohortsForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCohortsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCohortsNotFoundCode is the HTTP code returned for type PutCohortsNotFound
const PutCohortsNotFoundCode int = 404

/*PutCohortsNotFound Not found.

swagger:response putCohortsNotFound
*/
type PutCohortsNotFound struct {

	/*
	  In: Body
	*/
	Payload *PutCohortsNotFoundBody `json:"body,omitempty"`
}

// NewPutCohortsNotFound creates PutCohortsNotFound with default headers values
func NewPutCohortsNotFound() *PutCohortsNotFound {

	return &PutCohortsNotFound{}
}

// WithPayload adds the payload to the put cohorts not found response
func (o *PutCohortsNotFound) WithPayload(payload *PutCohortsNotFoundBody) *PutCohortsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put cohorts not found response
func (o *PutCohortsNotFound) SetPayload(payload *PutCohortsNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCohortsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCohortsConflictCode is the HTTP code returned for type PutCohortsConflict
const PutCohortsConflictCode int = 409

/*PutCohortsConflict Conflict with resource's state.

swagger:response putCohortsConflict
*/
type PutCohortsConflict struct {

	/*
	  In: Body
	*/
	Payload *PutCohortsConflictBody `json:"body,omitempty"`
}

// NewPutCohortsConflict creates PutCohortsConflict with default headers values
func NewPutCohortsConflict() *PutCohortsConflict {

	return &PutCohortsConflict{}
}

// WithPayload adds the payload to the put cohorts conflict response
func (o *PutCohortsConflict) WithPayload(payload *PutCohortsConflictBody) *PutCohortsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put cohorts conflict response
func (o *PutCohortsConflict) SetPayload(payload *PutCohortsConflictBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCohortsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutCohortsDefault Error response.

swagger:response putCohortsDefault
*/
type PutCohortsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *PutCohortsDefaultBody `json:"body,omitempty"`
}

// NewPutCohortsDefault creates PutCohortsDefault with default headers values
func NewPutCohortsDefault(code int) *PutCohortsDefault {
	if code <= 0 {
		code = 500
	}

	return &PutCohortsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put cohorts default response
func (o *PutCohortsDefault) WithStatusCode(code int) *PutCohortsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put cohorts default response
func (o *PutCohortsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put cohorts default response
func (o *PutCohortsDefault) WithPayload(payload *PutCohortsDefaultBody) *PutCohortsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put cohorts default response
func (o *PutCohortsDefault) SetPayload(payload *PutCohortsDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCohortsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
