// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// ExploreSearchConceptReader is a Reader for the ExploreSearchConcept structure.
type ExploreSearchConceptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExploreSearchConceptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExploreSearchConceptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExploreSearchConceptDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExploreSearchConceptOK creates a ExploreSearchConceptOK with default headers values
func NewExploreSearchConceptOK() *ExploreSearchConceptOK {
	return &ExploreSearchConceptOK{}
}

/*ExploreSearchConceptOK handles this case with default header values.

MedCo-Explore search concept response.
*/
type ExploreSearchConceptOK struct {
	Payload *ExploreSearchConceptOKBody
}

func (o *ExploreSearchConceptOK) Error() string {
	return fmt.Sprintf("[POST /node/explore/search/concept][%d] exploreSearchConceptOK  %+v", 200, o.Payload)
}

func (o *ExploreSearchConceptOK) GetPayload() *ExploreSearchConceptOKBody {
	return o.Payload
}

func (o *ExploreSearchConceptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExploreSearchConceptOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExploreSearchConceptDefault creates a ExploreSearchConceptDefault with default headers values
func NewExploreSearchConceptDefault(code int) *ExploreSearchConceptDefault {
	return &ExploreSearchConceptDefault{
		_statusCode: code,
	}
}

/*ExploreSearchConceptDefault handles this case with default header values.

Error response.
*/
type ExploreSearchConceptDefault struct {
	_statusCode int

	Payload *ExploreSearchConceptDefaultBody
}

// Code gets the status code for the explore search concept default response
func (o *ExploreSearchConceptDefault) Code() int {
	return o._statusCode
}

func (o *ExploreSearchConceptDefault) Error() string {
	return fmt.Sprintf("[POST /node/explore/search/concept][%d] exploreSearchConcept default  %+v", o._statusCode, o.Payload)
}

func (o *ExploreSearchConceptDefault) GetPayload() *ExploreSearchConceptDefaultBody {
	return o.Payload
}

func (o *ExploreSearchConceptDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExploreSearchConceptDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExploreSearchConceptDefaultBody explore search concept default body
swagger:model ExploreSearchConceptDefaultBody
*/
type ExploreSearchConceptDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this explore search concept default body
func (o *ExploreSearchConceptDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExploreSearchConceptDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreSearchConceptDefaultBody) UnmarshalBinary(b []byte) error {
	var res ExploreSearchConceptDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExploreSearchConceptOKBody explore search concept o k body
swagger:model ExploreSearchConceptOKBody
*/
type ExploreSearchConceptOKBody struct {

	// results
	Results []*models.ExploreSearchResultElement `json:"results"`

	// search
	Search *models.ExploreSearchConcept `json:"search,omitempty"`
}

// Validate validates this explore search concept o k body
func (o *ExploreSearchConceptOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExploreSearchConceptOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exploreSearchConceptOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ExploreSearchConceptOKBody) validateSearch(formats strfmt.Registry) error {

	if swag.IsZero(o.Search) { // not required
		return nil
	}

	if o.Search != nil {
		if err := o.Search.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploreSearchConceptOK" + "." + "search")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExploreSearchConceptOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreSearchConceptOKBody) UnmarshalBinary(b []byte) error {
	var res ExploreSearchConceptOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
