// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new medco node API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for medco node API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCohorts(params *DeleteCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCohortsOK, error)

	ExploreQuery(params *ExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreQueryOK, error)

	ExploreSearch(params *ExploreSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchOK, error)

	ExploreSearchConcept(params *ExploreSearchConceptParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchConceptOK, error)

	ExploreSearchModifier(params *ExploreSearchModifierParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchModifierOK, error)

	GetCohorts(params *GetCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCohortsOK, error)

	GetExploreQuery(params *GetExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetExploreQueryOK, error)

	PostCohorts(params *PostCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCohortsOK, error)

	PostCohortsPatientList(params *PostCohortsPatientListParams, authInfo runtime.ClientAuthInfoWriter) (*PostCohortsPatientListOK, error)

	PutCohorts(params *PutCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PutCohortsOK, error)

	PutDefaultCohort(params *PutDefaultCohortParams, authInfo runtime.ClientAuthInfoWriter) (*PutDefaultCohortOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCohorts deletes a cohort if it exists
*/
func (a *Client) DeleteCohorts(params *DeleteCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCohorts",
		Method:             "DELETE",
		PathPattern:        "/node/explore/cohorts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreQuery meds co explore query to the node
*/
func (a *Client) ExploreQuery(params *ExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreQuery",
		Method:             "POST",
		PathPattern:        "/node/explore/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearch returns info about the concepts and modifiers identified by the explore search request parameters
*/
func (a *Client) ExploreSearch(params *ExploreSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearch",
		Method:             "POST",
		PathPattern:        "/node/explore/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearchConcept returns info about the concept and its both concepts and modifiers children
*/
func (a *Client) ExploreSearchConcept(params *ExploreSearchConceptParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchConceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchConceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearchConcept",
		Method:             "POST",
		PathPattern:        "/node/explore/search/concept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchConceptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchConceptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchConceptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearchModifier returns info about the modifier and its children
*/
func (a *Client) ExploreSearchModifier(params *ExploreSearchModifierParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchModifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchModifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearchModifier",
		Method:             "POST",
		PathPattern:        "/node/explore/search/modifier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchModifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchModifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchModifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCohorts retrieves cohort names and patient set i ds
*/
func (a *Client) GetCohorts(params *GetCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCohorts",
		Method:             "GET",
		PathPattern:        "/node/explore/cohorts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetExploreQuery gets status and result of a med co explore query
*/
func (a *Client) GetExploreQuery(params *GetExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetExploreQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExploreQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExploreQuery",
		Method:             "GET",
		PathPattern:        "/node/explore/query/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExploreQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExploreQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetExploreQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostCohorts adds a new cohort
*/
func (a *Client) PostCohorts(params *PostCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCohorts",
		Method:             "POST",
		PathPattern:        "/node/explore/cohorts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostCohortsPatientList retrieves the encrypted patient list for a given cohort name
*/
func (a *Client) PostCohortsPatientList(params *PostCohortsPatientListParams, authInfo runtime.ClientAuthInfoWriter) (*PostCohortsPatientListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCohortsPatientListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCohortsPatientList",
		Method:             "POST",
		PathPattern:        "/node/explore/cohorts/patient-list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCohortsPatientListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCohortsPatientListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCohortsPatientListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutCohorts updates a cohort
*/
func (a *Client) PutCohorts(params *PutCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PutCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCohorts",
		Method:             "PUT",
		PathPattern:        "/node/explore/cohorts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutDefaultCohort changes the default cohort of the user
*/
func (a *Client) PutDefaultCohort(params *PutDefaultCohortParams, authInfo runtime.ClientAuthInfoWriter) (*PutDefaultCohortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDefaultCohortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDefaultCohort",
		Method:             "PUT",
		PathPattern:        "/node/explore/default-cohort/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDefaultCohortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDefaultCohortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutDefaultCohortDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
