swagger: "2.0"
info:
  description: "API of the MedCo connector, that orchestrates the query at the MedCo node and provides information about the MedCo network."
  version: "1.0.0"
  title: "MedCo Connector"
  contact:
    email: "medco@epfl.ch"
  license:
    name: "EULA"
    url: "https://raw.githubusercontent.com/ldsec/medco-connector/master/LICENSE"
basePath: "/medco"
tags:
  - name: "medco-network"
    description: "MedCo Network API"
  - name: "medco-node"
    description: "MedCo Node API"
  - name: "genomic-annotations"
    description: "Genomic Annotations Query API"
  - name : "survival-analysis"
    description : "Survival analysis API"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
externalDocs:
  description: "MedCo Technical Documentation"
  url: "https://medco.epfl.ch/documentation"
security:
  - medco-jwt: []

paths:
  /network:
    get:
      tags:
        - "medco-network"
      summary: "Get network metadata."
      operationId: "getMetadata"
      responses:
        200:
          $ref: "#/responses/networkMetadataResponse"
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: ["medco-network"]

  /node/explore/search/concept:
    post:
      tags:
        - "medco-node"
      summary: "Returns info about the concept and its (both concepts and modifiers) children"
      operationId: "exploreSearchConcept"
      parameters:
        - $ref: "#/parameters/exploreSearchConceptRequest"
      responses:
        200:
          $ref: "#/responses/exploreSearchConceptResponse"
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: [ "medco-explore" ]

  /node/explore/search/modifier:
    post:
      tags:
        - "medco-node"
      summary: "Returns info about the modifier and its children"
      operationId: "exploreSearchModifier"
      parameters:
        - $ref: "#/parameters/exploreSearchModifierRequest"
      responses:
        200:
          $ref: "#/responses/exploreSearchModifierResponse"
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: [ "medco-explore" ]

  /node/explore/query:
    post:
      tags:
        - "medco-node"
      summary: "MedCo-Explore query to the node."
      operationId: "exploreQuery"
      parameters:
        - in: "query"
          name: "sync"
          description: "Request synchronous query (defaults to true)."
          type: "boolean"
          default: true
        - $ref: "#/parameters/exploreQueryRequest"
      responses:
        200:
          $ref: "#/responses/exploreQueryResponse"
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: ["medco-explore"]

  /node/explore/query/{queryId}:
    get:
      tags:
        - "medco-node"
      summary: "Get status and result of a MedCo-Explore query."
      operationId: "getExploreQuery"
      parameters:
        - in: "path"
          name: "queryId"
          description: "Query ID"
          required: true
          type: "string"
      responses:
        200:
          $ref: "#/responses/exploreQueryResponse"
        404:
          description: "Query ID not found."
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: ["medco-explore"]

  /genomic-annotations/{annotation}:
    get:
      tags:
        - "genomic-annotations"
      summary: "Get genomic annotations values."
      operationId: "getValues"
      parameters:
        - in: "path"
          name: "annotation"
          description: "Genomic annotation name."
          required: true
          type: "string"
          pattern: '^\w+$'
        - in: "query"
          name: "value"
          description: "Genomic annotation value."
          required: true
          type: "string"
          maxLength: 255
        - in: "query"
          name: "limit"
          description: "Limits the number of records retrieved."
          type: "integer"
          default: 10
          minimum: 0
      responses:
        200:
          description: "Queried annotation values."
          schema:
            type: "array"
            items:
              type: "string"
        404:
          description: "Annotation not found."
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: ["medco-genomic-annotations"]

  /genomic-annotations/{annotation}/{value}:
    get:
      tags:
        - "genomic-annotations"
      summary: "Get variants corresponding to a genomic annotation value."
      operationId: "getVariants"
      parameters:
        - in: "path"
          name: "annotation"
          description: "Genomic annotation name."
          required: true
          type: "string"
          pattern: '^\w+$'
        - in: "path"
          name: "value"
          description: "Genomic annotation value."
          required: true
          type: "string"
          minLength: 1
        - in: "query"
          name: "zygosity"
          description: "Genomic annotation zygosity, if null defaults to all."
          type: "array"
          items:
            type: "string"
            enum:
              - heterozygous
              - homozygous
              - unknown
        - in: "query"
          name: "encrypted"
          description: "Request pre-encrypted variant identifiers (defaults to true)."
          type: "boolean"
          default: true
      responses:
        200:
          description: "Queried variants."
          schema:
            type: "array"
            items:
              type: "string"
        404:
          description: "Annotation or annotation value not found."
        default:
          $ref: "#/responses/errorResponse"
      security:
        - medco-jwt: ["medco-genomic-annotations"]
  /node/analysis/survival/query:
    post :
      tags:
        - "survival-analysis"
      summary: "Send a query to run a survival analysis"
      operationId: "survivalAnalysis"
      parameters:
      - $ref: "#/parameters/survivalAnalysisRequest"

      responses:
        200:
          $ref: "#/responses/survivalAnalysisResponse"
        400:
          $ref : "#/responses/badRequestResponse"
        404:
          $ref : "#/responses/notFoundResponse"
        default:
          $ref: '#/responses/errorResponse'
      security:
        - medco-jwt: ["medco-survival-analysis"]

  /node/explore/cohorts:
    get:
      tags:
        - "medco-node"
      summary: "Retrieve cohort names and patient set IDs"
      operationId: "getCohorts"
      parameters:
        - in: "query"
          name: "limit"
          description: "Limits the number of records retrieved. If the provided value is 0, there is no limit."
          type: "integer"
          default: 10
          minimum: 0
      responses:
        200:
          $ref: '#/responses/getCohortsResponse'
        default:
          $ref: '#/responses/errorResponse'
      security:
        - medco-jwt: ["medco-explore"]

  /node/explore/cohorts/{name}:
    post:
      tags:
        - "medco-node"
      summary: "Add a new cohort"
      operationId: "postCohorts"
      parameters:
        - in: "path"
          name: "name"
          description: "Name of the cohort to update"
          required: true
          type: "string"
          pattern: '^\w+$'
        - $ref: '#/parameters/cohortsRequest'

      responses:
        200:
          description: "Updated cohort"
        400:
          $ref : "#/responses/badRequestResponse"
        404:
          $ref : "#/responses/notFoundResponse"
        409:
          $ref : "#/responses/conflictResponse"
        default:
          $ref: '#/responses/errorResponse'
      security:
        - medco-jwt: ["medco-explore"]

    put:
      tags:
        - "medco-node"
      summary: "Update a cohort"
      operationId: "putCohorts"
      parameters:
        - in: "path"
          name: "name"
          description: "Name of the cohort to update"
          required: true
          type: "string"
          pattern: '^\w+$'
        - $ref: '#/parameters/cohortsRequest'

      responses:
        200:
          description: "Updated cohort"
        400:
          $ref : "#/responses/badRequestResponse"
        404:
          $ref : "#/responses/notFoundResponse"
        409:
          $ref : "#/responses/conflictResponse"
        default:
          $ref: '#/responses/errorResponse'
      security:
        - medco-jwt: ["medco-explore"]

    delete:
      tags:
        - "medco-node"
      summary: "Delete a cohort if it exists"
      operationId: "deleteCohorts"
      parameters:
        - in: "path"
          description: "Name of the cohort to delete"
          required: true
          name: "name"
          type: "string"
          pattern: '^\w+$'
      responses:
        200:
          description: "Deleted cohort"
        404:
          $ref : '#/responses/notFoundResponse'
        default:
          $ref: '#/responses/errorResponse'
      security:
        - medco-jwt: ["medco-explore"]

  /node/explore/cohorts/patient-list:
    post:
      tags:
        - "medco-node"
      summary: "Retrieve the encrypted patient list for a given cohort name"
      operationId: "postCohortsPatientList"
      parameters:
        - $ref: '#/parameters/cohortsPatientListRequest'
      responses:
        200:
          $ref: '#/responses/getCohortsPatientListResponse'
        404:
          $ref: '#/responses/notFoundResponse'
        403:
          $ref: '#/responses/forbiddenResponse'
        default:
          $ref: '#/responses/errorResponse'
      security:
        - medco-jwt: ["medco-explore"]


securityDefinitions:
  medco-jwt:
    type: "oauth2"
    flow: "application"
    tokenUrl: "https://medco-demo.epfl.ch/auth"
    description: "MedCo JWT token."

parameters:
  exploreSearchConceptRequest:
    in: "body"
    name: "searchConceptRequest"
    description: "MedCo-Explore ontology search concept request."
    required: true
    schema:
      $ref: "#/definitions/exploreSearchConcept"

  exploreSearchModifierRequest:
    in: "body"
    name: "searchModifierRequest"
    description: "MedCo-Explore ontology search modifier request."
    required: true
    schema:
      $ref: "#/definitions/exploreSearchModifier"

  exploreQueryRequest:
    in: "body"
    name: "queryRequest"
    description: "MedCo-Explore query request."
    required: true
    schema:
      type: "object"
      properties:
        id:
          type: "string"
          pattern: '^[\w:-]+$'
        query:
          $ref: "#/definitions/exploreQuery"

  cohortsRequest:
    in: "body"
    description: "Cohort that has been updated or created."
    name: "cohortsRequest"
    required: true
    schema:
      type: "object"
      properties:
        patientSetID:
          type: "integer"
        creationDate:
          type: "string"
        updateDate:
          type: "string"
      required:
        - patientSetID
        - creationDate
        - updateDate
  
  cohortsPatientListRequest:
    in: "body"
    description: "Cohort patient list request"
    name: "cohortsPatientListRequest"
    required: true
    schema:
      type: "object"
      properties:
        id:
          type: "string"
          pattern: '^[\w:-]+$'
        cohortName:
          type: "string"
          pattern: '^\w+$'
        userPublicKey:
          type: "string"
          pattern: '^[\w=-]+$'
      required:
        - cohortName
        - userPublicKey

  survivalAnalysisRequest:
    in: "body"
    description: "User public key, patient list and time codes strings for the survival analysis"
    name: "body"
    required: true
    schema:
      type: "object"
      properties:
        ID:
          type: "string"
          pattern: '^[\w:-]+$'
        userPublicKey:
          type: "string"
          pattern: '^[\w=-]+$'
        cohortName:
          type: "string"
          pattern: '^\w+$'
        subGroupDefinitions:
          type : "array"
          items:
            type: "object"
            properties:
              groupName:
                type: "string"
                pattern: '^\w+$'
              subGroupTiming:
                $ref: '#/definitions/timing'
              panels:
                type: "array"
                items:
                  $ref: '#/definitions/panel'
          maxItems: 4
        timeLimit:
          type: "integer"
          minimum: 1
        timeGranularity:
          type: "string"
          enum:
            - day
            - week
            - month
            - year
          default: "day"
        startConcept:
          type: "string"
          pattern: '^\/$|^((\/[^\/]+)+\/?)$'
        startModifier:
          type: "object"
          properties:
            modifierKey:
              type: "string"
              pattern: '^((\/[^\/]+)+\/)$'
            appliedPath:
              type: "string"
              pattern: '^((\/[^\/]+)+\/%?)$'
          required:
            - modifierKey
            - appliedPath
        startsWhen:
          type: "string"
          enum:
            - earliest
            - latest
        endConcept:
          type: "string"
          pattern: '^\/$|^((\/[^\/]+)+\/?)$'
        endModifier:
          type: "object"
          properties:
            modifierKey:
              type: "string"
              pattern: '^((\/[^\/]+)+\/)$'
            appliedPath:
              type: "string"
              pattern: '^((\/[^\/]+)+\/%?)$'
          required:
            - modifierKey
            - appliedPath
        endsWhen:
          type: "string"
          enum:
            - earliest
            - latest
      required:
        - ID
        - userPublicKey
        - cohortName
        - timeLimit
        - timeGranularity
        - startConcept
        - startsWhen
        - endConcept
        - endsWhen

responses:
  errorResponse:
    description: "Error response."
    schema:
      type: "object"
      properties:
        message:
          type: "string"

  notFoundResponse:
    description: "Not found."
    schema:
      type: "object"
      properties:
        message:
          type: "string"

  conflictResponse:
    description: "Conflict with resource's state."
    schema:
      type: "object"
      properties:
        message:
          type: "string"

  badRequestResponse:
    description: "Bad user input in request."
    schema:
      type: "object"
      properties:
        message:
          type: "string"
  
  forbiddenResponse:
    description: "Request is valid and user is authenticated, but not authorized to perform this action."
    schema:
      type: "object"
      properties:
        message:
          type: "string"

  networkMetadataResponse:
    description: "Network metadata (public key and nodes list)."
    schema:
      type: "object"
      required: [nodeIndex]
      properties:
        public-key:
          type: "string"
          description: "Aggregated public key of the collective authority."
        nodes:
          type: "array"
          items:
            type: "object"
            required: [index]
            properties:
              index:
                type: "integer"
              name:
                type: "string"
              url:
                type: "string"
        nodeIndex:
          type: "integer"

  exploreSearchConceptResponse:
    description: "MedCo-Explore search concept query response."
    schema:
      type: "object"
      properties:
        search:
          $ref: "#/definitions/exploreSearchConcept"
        results:
          type: "array"
          items:
            $ref: "#/definitions/exploreSearchResultElement"

  exploreSearchModifierResponse:
    description: "MedCo-Explore search modifier children query response."
    schema:
      type: "object"
      properties:
        search:
          $ref: "#/definitions/exploreSearchModifier"
        results:
          type: "array"
          items:
            $ref: "#/definitions/exploreSearchResultElement"

  exploreQueryResponse:
    description: "MedCo-Explore query response."
    schema:
      type: "object"
      properties:
        id:
          type: "string"
        query:
          $ref: "#/definitions/exploreQuery"
        result:
          $ref: "#/definitions/exploreQueryResultElement"

  getCohortsResponse:
    description: "Queried cohorts"
    schema:
      type: "array"
      items:
        type: "object"
        properties:
          cohortId:
            type: "integer"
          queryId:
            type: "integer"
          cohortName:
            type: "string"
          creationDate:
            type: "string"
          updateDate:
            type: "string"
          queryDefinition:
            type: "object"
            properties:
              panels:
                type: "array"
                items:
                  $ref: "#/definitions/panel"
              queryTiming:
                $ref: "#/definitions/timing"

  getCohortsPatientListResponse:
    description: "Queried patient list"
    schema:
      type: "object"
      properties:
        results:
          type: "array"
          items:
            type: "string"
        timers:
          $ref: "#/definitions/timers"

  survivalAnalysisResponse:
    description: "Queried survival analysis"
    schema:
      type: "object"
      properties:
        results:
          type: "array"
          items:
            type: "object"
            properties:
              groupID:
                type: "string"
              initialCount:
                type: "string"
              groupResults:
                type : "array"
                items:
                  type: "object"
                  properties:
                    timepoint:
                      type: "integer"
                    events:
                      type: "object"
                      properties:
                        eventofinterest:
                          type: "string"
                        censoringevent:
                          type: "string"
                      required:
                        - eventofinterest
                        - censoringevent
                  required:
                    - timepoint
                    - events
        timers:
          $ref: "#/definitions/timers"

definitions:
  exploreSearchConcept:
    type: "object"
    required:
      - path
      - operation
    properties:
      path:
        type: "string"
        pattern: '^\/$|^((\/[^\/]+)+\/)$'
      operation:
        type: "string"
        enum:
          - info
          - children

  exploreSearchModifier:
    type: "object"
    required:
      - path
      - appliedPath
      - appliedConcept
      - operation
    properties:
      path:
        type: "string"
        pattern: '^\/$|^((\/[^\/]+)+\/)$'
      appliedPath:
        type: "string"
        pattern: '^\/$|^((\/[^\/]+)+\/%?)$'
      appliedConcept:
        type: "string"
        pattern: '^\/$|^((\/[^\/]+)+\/)$'
      operation:
        type: "string"
        enum:
          - info
          - children

  exploreSearchResultElement:
    type: "object"
    required: [leaf]
    properties:
      path:
        type: "string"
      appliedPath:
        type: "string"
      name:
        type: "string"
      displayName:
        type: "string"
      code:
        type: "string"
      type:
        type: "string"
        enum:
          - concept
          - concept_container
          - concept_folder
          - modifier
          - modifier_container
          - modifier_folder
          - genomic_annotation
      leaf:
        type: "boolean"
      medcoEncryption:
        type: "object"
        required: [encrypted, id]
        properties:
          encrypted:
            type: "boolean"
          id:
            type: "integer"
            format: "int64"
          childrenIds:
            type: "array"
            items:
              type: "integer"
              format: "int64"
      metadata:
        $ref: "#/definitions/metadataxml"

  metadataxml:
    type: "object"
    properties:
      ValueMetadata:
        type: object
        properties:
          Version:
            type: "string"
          CreationDateTime:
            type: "string"
          TestID:
            type: "string"
          TestName:
            type: "string"
          DataType:
            type: "string"
          Flagstouse:
            type: "string"
          Oktousevalues:
            type: "string"
          EnumValues:
            type: "string"
          UnitValues:
            $ref: "#/definitions/UnitValues"
          EncryptedType:
            type: "string"
          NodeEncryptID:
            type: "string"
          ChildrenEncryptIDs:
            type: "string"

  UnitValues:
    type: object
    properties:
      NormalUnits:
        type: "string"
      EqualUnits:
        type: "array"
        items:
          type: "string"
      ExcludingUnits:
        type: "array"
        items:
          type: "string"
      ConvertingUnits:
        type: "array"
        items:
         type: "object"
         properties:
           Units:
             type: "string"
           MultiplyingFactor:
             type: "string"

  exploreQuery:
    description: "MedCo-Explore query"
    properties:
      userPublicKey:
        type: "string"
        pattern: '^[\w=-]+$'
      panels:
        type: "array"
        description: "i2b2 panels (linked by an AND)"
        items:
          $ref: "#/definitions/panel"
      queryTiming:
        $ref: "#/definitions/timing"
  panel:
    type: "object"
    required: [not]
    description: "collection of i2b2 items (linked by OR)"
    properties:
      not:
        type: "boolean"
        description: "exclude the i2b2 panel"
      conceptItems:
        type: "array"
        description: "items containing i2b2 concepts (and optionally modifiers)"
        items:
          type: "object"
          required: [encrypted, queryTerm]
          properties:
            queryTerm:
              type: "string"
              pattern: '^([\w=-]+)$|^((\/[^\/]+)+\/)$'
            operator:
              type: "string"
              enum:
                # NUMBER operators
                - EQ
                - NE
                - GT
                - GE
                - LT
                - LE
                - BETWEEN
                # TEXT operators
                - IN
                - LIKE[exact]
                - LIKE[begin]
                - LIKE[end]
                - LIKE[contains]
              description: >
                # NUMBER operators
                EQ: equal
                NE: not equal
                GT: greater than
                GE: greater than or equal
                LT: less than
                LE: less than or equal
                BETWEEN: between (value syntax: "x and y")
                # TEXT operators
                IN: in (value syntax: "'x','y','z'")
                LIKE[exact]: equal
                LIKE[begin]: begins with
                LIKE[end]: ends with
                LIKE[contains]: contains
            value:
              type: "string"
            type:
              type: "string"
              enum:
                - NUMBER
                - TEXT
            modifier:
              type: "object"
              required: [appliedPath, modifierKey]
              properties:
                appliedPath:
                  type: "string"
                  pattern: '^((\/[^\/]+)+\/%?)$'
                modifierKey:
                  type: "string"
                  pattern: '^((\/[^\/]+)+\/)$'
            encrypted:
              type: "boolean"
      patientSetIDItems:
        type: "array"
        description: "items containing patient set IDs"
        items:
          type: "integer"
      panelTiming:
        $ref: "#/definitions/timing"

  exploreQueryType:
    type: "string"
    enum:
      - patient_list
      - count_per_site
      - count_per_site_obfuscated
      - count_per_site_shuffled
      - count_per_site_shuffled_obfuscated
      - count_global
      - count_global_obfuscated

  exploreQueryResultElement:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
          - queued
          - pending
          - error
          - available
      encryptedCount:
        type: "string"
      encryptedPatientList:
        type: "array"
        items:
          type: "string"
      patientSetID:
        type: "integer"
      timers:
        $ref: "#/definitions/timers"


  restApiAuthorization:
    type: "string"
    enum:
      - medco-network
      - medco-explore
      - medco-genomic-annotations
      - medco-survival-analysis

  user:
    type: "object"
    properties:
      id:
        type: "string"
      token:
        type: "string"
      authorizations:
        type: "object"
        properties:
          restApi:
            type: "array"
            items:
              $ref: "#/definitions/restApiAuthorization"
          exploreQuery:
            type: "array"
            items:
              $ref: "#/definitions/exploreQueryType"

  timing:
    type: string
    enum:
      - any
      - samevisit
      - sameinstancenum
    default: "any"

  timers:
    type: "array"
    items:
      type: "object"
      required: [milliseconds]
      properties:
        name:
          type: "string"
        milliseconds:
          type: "integer"
          format: "int64"
