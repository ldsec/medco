// Code generated by go-swagger; DO NOT EDIT.

package survival_analysis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSurvivalAnalysisParams creates a new GetSurvivalAnalysisParams object
// no default values defined in spec.
func NewGetSurvivalAnalysisParams() GetSurvivalAnalysisParams {

	return GetSurvivalAnalysisParams{}
}

// GetSurvivalAnalysisParams contains all the bound params for the get survival analysis operation
// typically these are obtained from a http.Request
//
// swagger:parameters getSurvivalAnalysis
type GetSurvivalAnalysisParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Time point resolution
	  Required: true
	  Pattern: day|week|month|year
	  In: path
	*/
	Granularity string
	/*User public key and selection panels
	  In: body
	*/
	UserPublicKeyAndPanels GetSurvivalAnalysisBody
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSurvivalAnalysisParams() beforehand.
func (o *GetSurvivalAnalysisParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rGranularity, rhkGranularity, _ := route.Params.GetOK("granularity")
	if err := o.bindGranularity(rGranularity, rhkGranularity, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body GetSurvivalAnalysisBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("userPublicKeyAndPanels", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.UserPublicKeyAndPanels = body
			}
		}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGranularity binds and validates parameter Granularity from path.
func (o *GetSurvivalAnalysisParams) bindGranularity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Granularity = raw

	if err := o.validateGranularity(formats); err != nil {
		return err
	}

	return nil
}

// validateGranularity carries on validations for parameter Granularity
func (o *GetSurvivalAnalysisParams) validateGranularity(formats strfmt.Registry) error {

	if err := validate.Pattern("granularity", "path", o.Granularity, `day|week|month|year`); err != nil {
		return err
	}

	return nil
}
