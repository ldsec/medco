// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco-connector/models"
)

// GetCohortsHandlerFunc turns a function with the right signature into a get cohorts handler
type GetCohortsHandlerFunc func(GetCohortsParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCohortsHandlerFunc) Handle(params GetCohortsParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetCohortsHandler interface for that can handle valid get cohorts params
type GetCohortsHandler interface {
	Handle(GetCohortsParams, *models.User) middleware.Responder
}

// NewGetCohorts creates a new http.Handler for the get cohorts operation
func NewGetCohorts(ctx *middleware.Context, handler GetCohortsHandler) *GetCohorts {
	return &GetCohorts{Context: ctx, Handler: handler}
}

/*GetCohorts swagger:route GET /node/explore/cohorts medco-node getCohorts

Retrieve cohort names and patient set IDs

*/
type GetCohorts struct {
	Context *middleware.Context
	Handler GetCohortsHandler
}

func (o *GetCohorts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCohortsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCohortsDefaultBody get cohorts default body
//
// swagger:model GetCohortsDefaultBody
type GetCohortsDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts default body
func (o *GetCohortsDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCohortsOKBodyItems0 get cohorts o k body items0
//
// swagger:model GetCohortsOKBodyItems0
type GetCohortsOKBodyItems0 struct {

	// cohort name
	CohortName string `json:"cohortName,omitempty"`

	// creation date
	CreationDate float64 `json:"creationDate,omitempty"`

	// patient set ID
	PatientSetID float64 `json:"patientSetID,omitempty"`

	// update date
	UpdateDate float64 `json:"updateDate,omitempty"`
}

// Validate validates this get cohorts o k body items0
func (o *GetCohortsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetCohortsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
