// Code generated by go-swagger; DO NOT EDIT.

package medco_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ldsec/medco-connector/models"
)

// GetMetadataHandlerFunc turns a function with the right signature into a get metadata handler
type GetMetadataHandlerFunc func(GetMetadataParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetadataHandlerFunc) Handle(params GetMetadataParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetMetadataHandler interface for that can handle valid get metadata params
type GetMetadataHandler interface {
	Handle(GetMetadataParams, *models.User) middleware.Responder
}

// NewGetMetadata creates a new http.Handler for the get metadata operation
func NewGetMetadata(ctx *middleware.Context, handler GetMetadataHandler) *GetMetadata {
	return &GetMetadata{Context: ctx, Handler: handler}
}

/*GetMetadata swagger:route GET /network medco-network getMetadata

Get network metadata.

*/
type GetMetadata struct {
	Context *middleware.Context
	Handler GetMetadataHandler
}

func (o *GetMetadata) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMetadataParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetMetadataDefaultBody get metadata default body
//
// swagger:model GetMetadataDefaultBody
type GetMetadataDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get metadata default body
func (o *GetMetadataDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMetadataDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetadataDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetMetadataDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetMetadataOKBody get metadata o k body
//
// swagger:model GetMetadataOKBody
type GetMetadataOKBody struct {

	// node index
	// Required: true
	NodeIndex *int64 `json:"nodeIndex"`

	// nodes
	Nodes []*GetMetadataOKBodyNodesItems0 `json:"nodes"`

	// Aggregated public key of the collective authority.
	PublicKey string `json:"public-key,omitempty"`
}

// Validate validates this get metadata o k body
func (o *GetMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMetadataOKBody) validateNodeIndex(formats strfmt.Registry) error {

	if err := validate.Required("getMetadataOK"+"."+"nodeIndex", "body", o.NodeIndex); err != nil {
		return err
	}

	return nil
}

func (o *GetMetadataOKBody) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(o.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(o.Nodes); i++ {
		if swag.IsZero(o.Nodes[i]) { // not required
			continue
		}

		if o.Nodes[i] != nil {
			if err := o.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMetadataOK" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res GetMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetMetadataOKBodyNodesItems0 get metadata o k body nodes items0
//
// swagger:model GetMetadataOKBodyNodesItems0
type GetMetadataOKBodyNodesItems0 struct {

	// index
	// Required: true
	Index *int64 `json:"index"`

	// name
	Name string `json:"name,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this get metadata o k body nodes items0
func (o *GetMetadataOKBodyNodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMetadataOKBodyNodesItems0) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", o.Index); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMetadataOKBodyNodesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetadataOKBodyNodesItems0) UnmarshalBinary(b []byte) error {
	var res GetMetadataOKBodyNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
