// Code generated by go-swagger; DO NOT EDIT.

package genomic_annotations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetValuesParams creates a new GetValuesParams object
// with the default values initialized.
func NewGetValuesParams() GetValuesParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(10)
	)

	return GetValuesParams{
		Limit: &limitDefault,
	}
}

// GetValuesParams contains all the bound params for the get values operation
// typically these are obtained from a http.Request
//
// swagger:parameters getValues
type GetValuesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Genomic annotation name.
	  Required: true
	  Pattern: ^\w+$
	  In: path
	*/
	Annotation string
	/*Limits the number of records retrieved.
	  Minimum: 0
	  In: query
	  Default: 10
	*/
	Limit *int64
	/*Genomic annotation value.
	  Required: true
	  Max Length: 255
	  In: query
	*/
	Value string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetValuesParams() beforehand.
func (o *GetValuesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rAnnotation, rhkAnnotation, _ := route.Params.GetOK("annotation")
	if err := o.bindAnnotation(rAnnotation, rhkAnnotation, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qValue, qhkValue, _ := qs.GetOK("value")
	if err := o.bindValue(qValue, qhkValue, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAnnotation binds and validates parameter Annotation from path.
func (o *GetValuesParams) bindAnnotation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Annotation = raw

	if err := o.validateAnnotation(formats); err != nil {
		return err
	}

	return nil
}

// validateAnnotation carries on validations for parameter Annotation
func (o *GetValuesParams) validateAnnotation(formats strfmt.Registry) error {

	if err := validate.Pattern("annotation", "path", o.Annotation, `^\w+$`); err != nil {
		return err
	}

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetValuesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetValuesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetValuesParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", int64(*o.Limit), 0, false); err != nil {
		return err
	}

	return nil
}

// bindValue binds and validates parameter Value from query.
func (o *GetValuesParams) bindValue(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("value", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("value", "query", raw); err != nil {
		return err
	}

	o.Value = raw

	if err := o.validateValue(formats); err != nil {
		return err
	}

	return nil
}

// validateValue carries on validations for parameter Value
func (o *GetValuesParams) validateValue(formats strfmt.Registry) error {

	if err := validate.MaxLength("value", "query", o.Value, 255); err != nil {
		return err
	}

	return nil
}
