// Code generated by go-swagger; DO NOT EDIT.

package medco_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetMetadataReader is a Reader for the GetMetadata structure.
type GetMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetMetadataDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMetadataOK creates a GetMetadataOK with default headers values
func NewGetMetadataOK() *GetMetadataOK {
	return &GetMetadataOK{}
}

/*GetMetadataOK handles this case with default header values.

Network metadata (public key and nodes list).
*/
type GetMetadataOK struct {
	Payload *GetMetadataOKBody
}

func (o *GetMetadataOK) Error() string {
	return fmt.Sprintf("[GET /network][%d] getMetadataOK  %+v", 200, o.Payload)
}

func (o *GetMetadataOK) GetPayload() *GetMetadataOKBody {
	return o.Payload
}

func (o *GetMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMetadataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetadataDefault creates a GetMetadataDefault with default headers values
func NewGetMetadataDefault(code int) *GetMetadataDefault {
	return &GetMetadataDefault{
		_statusCode: code,
	}
}

/*GetMetadataDefault handles this case with default header values.

Error response.
*/
type GetMetadataDefault struct {
	_statusCode int

	Payload *GetMetadataDefaultBody
}

// Code gets the status code for the get metadata default response
func (o *GetMetadataDefault) Code() int {
	return o._statusCode
}

func (o *GetMetadataDefault) Error() string {
	return fmt.Sprintf("[GET /network][%d] getMetadata default  %+v", o._statusCode, o.Payload)
}

func (o *GetMetadataDefault) GetPayload() *GetMetadataDefaultBody {
	return o.Payload
}

func (o *GetMetadataDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMetadataDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetMetadataDefaultBody get metadata default body
swagger:model GetMetadataDefaultBody
*/
type GetMetadataDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get metadata default body
func (o *GetMetadataDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMetadataDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetadataDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetMetadataDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetMetadataOKBody get metadata o k body
swagger:model GetMetadataOKBody
*/
type GetMetadataOKBody struct {

	// node index
	// Required: true
	NodeIndex *int64 `json:"nodeIndex"`

	// nodes
	Nodes []*NodesItems0 `json:"nodes"`

	// Aggregated public key of the collective authority.
	PublicKey string `json:"public-key,omitempty"`
}

// Validate validates this get metadata o k body
func (o *GetMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMetadataOKBody) validateNodeIndex(formats strfmt.Registry) error {

	if err := validate.Required("getMetadataOK"+"."+"nodeIndex", "body", o.NodeIndex); err != nil {
		return err
	}

	return nil
}

func (o *GetMetadataOKBody) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(o.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(o.Nodes); i++ {
		if swag.IsZero(o.Nodes[i]) { // not required
			continue
		}

		if o.Nodes[i] != nil {
			if err := o.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMetadataOK" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res GetMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NodesItems0 nodes items0
swagger:model NodesItems0
*/
type NodesItems0 struct {

	// index
	// Required: true
	Index *int64 `json:"index"`

	// name
	Name string `json:"name,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this nodes items0
func (o *NodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NodesItems0) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", o.Index); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NodesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NodesItems0) UnmarshalBinary(b []byte) error {
	var res NodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
