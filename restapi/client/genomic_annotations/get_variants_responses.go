// Code generated by go-swagger; DO NOT EDIT.

package genomic_annotations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetVariantsReader is a Reader for the GetVariants structure.
type GetVariantsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVariantsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVariantsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetVariantsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetVariantsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVariantsOK creates a GetVariantsOK with default headers values
func NewGetVariantsOK() *GetVariantsOK {
	return &GetVariantsOK{}
}

/*GetVariantsOK handles this case with default header values.

Queried variants.
*/
type GetVariantsOK struct {
	Payload []string
}

func (o *GetVariantsOK) Error() string {
	return fmt.Sprintf("[GET /genomic-annotations/{annotation}/{value}][%d] getVariantsOK  %+v", 200, o.Payload)
}

func (o *GetVariantsOK) GetPayload() []string {
	return o.Payload
}

func (o *GetVariantsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVariantsNotFound creates a GetVariantsNotFound with default headers values
func NewGetVariantsNotFound() *GetVariantsNotFound {
	return &GetVariantsNotFound{}
}

/*GetVariantsNotFound handles this case with default header values.

Annotation or annotation value not found.
*/
type GetVariantsNotFound struct {
}

func (o *GetVariantsNotFound) Error() string {
	return fmt.Sprintf("[GET /genomic-annotations/{annotation}/{value}][%d] getVariantsNotFound ", 404)
}

func (o *GetVariantsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVariantsDefault creates a GetVariantsDefault with default headers values
func NewGetVariantsDefault(code int) *GetVariantsDefault {
	return &GetVariantsDefault{
		_statusCode: code,
	}
}

/*GetVariantsDefault handles this case with default header values.

Error response.
*/
type GetVariantsDefault struct {
	_statusCode int

	Payload *GetVariantsDefaultBody
}

// Code gets the status code for the get variants default response
func (o *GetVariantsDefault) Code() int {
	return o._statusCode
}

func (o *GetVariantsDefault) Error() string {
	return fmt.Sprintf("[GET /genomic-annotations/{annotation}/{value}][%d] getVariants default  %+v", o._statusCode, o.Payload)
}

func (o *GetVariantsDefault) GetPayload() *GetVariantsDefaultBody {
	return o.Payload
}

func (o *GetVariantsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetVariantsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetVariantsDefaultBody get variants default body
swagger:model GetVariantsDefaultBody
*/
type GetVariantsDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get variants default body
func (o *GetVariantsDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetVariantsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVariantsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetVariantsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
