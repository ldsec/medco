// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco-connector/restapi/models"
)

// GetExploreQueryReader is a Reader for the GetExploreQuery structure.
type GetExploreQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExploreQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExploreQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetExploreQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetExploreQueryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetExploreQueryOK creates a GetExploreQueryOK with default headers values
func NewGetExploreQueryOK() *GetExploreQueryOK {
	return &GetExploreQueryOK{}
}

/*GetExploreQueryOK handles this case with default header values.

MedCo-Explore query response.
*/
type GetExploreQueryOK struct {
	Payload *GetExploreQueryOKBody
}

func (o *GetExploreQueryOK) Error() string {
	return fmt.Sprintf("[GET /node/explore/query/{queryId}][%d] getExploreQueryOK  %+v", 200, o.Payload)
}

func (o *GetExploreQueryOK) GetPayload() *GetExploreQueryOKBody {
	return o.Payload
}

func (o *GetExploreQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetExploreQueryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExploreQueryNotFound creates a GetExploreQueryNotFound with default headers values
func NewGetExploreQueryNotFound() *GetExploreQueryNotFound {
	return &GetExploreQueryNotFound{}
}

/*GetExploreQueryNotFound handles this case with default header values.

Query ID not found.
*/
type GetExploreQueryNotFound struct {
}

func (o *GetExploreQueryNotFound) Error() string {
	return fmt.Sprintf("[GET /node/explore/query/{queryId}][%d] getExploreQueryNotFound ", 404)
}

func (o *GetExploreQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExploreQueryDefault creates a GetExploreQueryDefault with default headers values
func NewGetExploreQueryDefault(code int) *GetExploreQueryDefault {
	return &GetExploreQueryDefault{
		_statusCode: code,
	}
}

/*GetExploreQueryDefault handles this case with default header values.

Error response.
*/
type GetExploreQueryDefault struct {
	_statusCode int

	Payload *GetExploreQueryDefaultBody
}

// Code gets the status code for the get explore query default response
func (o *GetExploreQueryDefault) Code() int {
	return o._statusCode
}

func (o *GetExploreQueryDefault) Error() string {
	return fmt.Sprintf("[GET /node/explore/query/{queryId}][%d] getExploreQuery default  %+v", o._statusCode, o.Payload)
}

func (o *GetExploreQueryDefault) GetPayload() *GetExploreQueryDefaultBody {
	return o.Payload
}

func (o *GetExploreQueryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetExploreQueryDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetExploreQueryDefaultBody get explore query default body
swagger:model GetExploreQueryDefaultBody
*/
type GetExploreQueryDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get explore query default body
func (o *GetExploreQueryDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetExploreQueryDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetExploreQueryDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetExploreQueryDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetExploreQueryOKBody get explore query o k body
swagger:model GetExploreQueryOKBody
*/
type GetExploreQueryOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// query
	Query *models.ExploreQuery `json:"query,omitempty"`

	// result
	Result *models.ExploreQueryResultElement `json:"result,omitempty"`
}

// Validate validates this get explore query o k body
func (o *GetExploreQueryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetExploreQueryOKBody) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(o.Query) { // not required
		return nil
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getExploreQueryOK" + "." + "query")
			}
			return err
		}
	}

	return nil
}

func (o *GetExploreQueryOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getExploreQueryOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetExploreQueryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetExploreQueryOKBody) UnmarshalBinary(b []byte) error {
	var res GetExploreQueryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
