// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ldsec/medco-connector/models"
)

// ExploreQueryReader is a Reader for the ExploreQuery structure.
type ExploreQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExploreQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExploreQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExploreQueryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExploreQueryOK creates a ExploreQueryOK with default headers values
func NewExploreQueryOK() *ExploreQueryOK {
	return &ExploreQueryOK{}
}

/*ExploreQueryOK handles this case with default header values.

MedCo-Explore query response.
*/
type ExploreQueryOK struct {
	Payload *ExploreQueryOKBody
}

func (o *ExploreQueryOK) Error() string {
	return fmt.Sprintf("[POST /node/explore/query][%d] exploreQueryOK  %+v", 200, o.Payload)
}

func (o *ExploreQueryOK) GetPayload() *ExploreQueryOKBody {
	return o.Payload
}

func (o *ExploreQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExploreQueryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExploreQueryDefault creates a ExploreQueryDefault with default headers values
func NewExploreQueryDefault(code int) *ExploreQueryDefault {
	return &ExploreQueryDefault{
		_statusCode: code,
	}
}

/*ExploreQueryDefault handles this case with default header values.

Error response.
*/
type ExploreQueryDefault struct {
	_statusCode int

	Payload *ExploreQueryDefaultBody
}

// Code gets the status code for the explore query default response
func (o *ExploreQueryDefault) Code() int {
	return o._statusCode
}

func (o *ExploreQueryDefault) Error() string {
	return fmt.Sprintf("[POST /node/explore/query][%d] exploreQuery default  %+v", o._statusCode, o.Payload)
}

func (o *ExploreQueryDefault) GetPayload() *ExploreQueryDefaultBody {
	return o.Payload
}

func (o *ExploreQueryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExploreQueryDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExploreQueryBody explore query body
swagger:model ExploreQueryBody
*/
type ExploreQueryBody struct {

	// id
	// Pattern: ^[\w:-]+$
	ID string `json:"id,omitempty"`

	// query
	Query *models.ExploreQuery `json:"query,omitempty"`
}

// Validate validates this explore query body
func (o *ExploreQueryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExploreQueryBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.Pattern("queryRequest"+"."+"id", "body", string(o.ID), `^[\w:-]+$`); err != nil {
		return err
	}

	return nil
}

func (o *ExploreQueryBody) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(o.Query) { // not required
		return nil
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryRequest" + "." + "query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExploreQueryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreQueryBody) UnmarshalBinary(b []byte) error {
	var res ExploreQueryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExploreQueryDefaultBody explore query default body
swagger:model ExploreQueryDefaultBody
*/
type ExploreQueryDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this explore query default body
func (o *ExploreQueryDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExploreQueryDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreQueryDefaultBody) UnmarshalBinary(b []byte) error {
	var res ExploreQueryDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExploreQueryOKBody explore query o k body
swagger:model ExploreQueryOKBody
*/
type ExploreQueryOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// query
	Query *models.ExploreQuery `json:"query,omitempty"`

	// result
	Result *models.ExploreQueryResultElement `json:"result,omitempty"`
}

// Validate validates this explore query o k body
func (o *ExploreQueryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExploreQueryOKBody) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(o.Query) { // not required
		return nil
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploreQueryOK" + "." + "query")
			}
			return err
		}
	}

	return nil
}

func (o *ExploreQueryOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploreQueryOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExploreQueryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreQueryOKBody) UnmarshalBinary(b []byte) error {
	var res ExploreQueryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
