// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExploreQueryResultElement explore query result element
// swagger:model exploreQueryResultElement
type ExploreQueryResultElement struct {

	// encrypted count
	EncryptedCount string `json:"encryptedCount,omitempty"`

	// encrypted patient list
	EncryptedPatientList []string `json:"encryptedPatientList"`

	// encrypted survival analysis
	EncryptedSurvivalAnalysis []*ExploreQueryResultElementEncryptedSurvivalAnalysisItems0 `json:"encryptedSurvivalAnalysis"`

	// patient set ID
	PatientSetID string `json:"patientSetID,omitempty"`

	// status
	// Enum: [queued pending error available]
	Status string `json:"status,omitempty"`

	// timers
	Timers []*ExploreQueryResultElementTimersItems0 `json:"timers"`
}

// Validate validates this explore query result element
func (m *ExploreQueryResultElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptedSurvivalAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExploreQueryResultElement) validateEncryptedSurvivalAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptedSurvivalAnalysis) { // not required
		return nil
	}

	for i := 0; i < len(m.EncryptedSurvivalAnalysis); i++ {
		if swag.IsZero(m.EncryptedSurvivalAnalysis[i]) { // not required
			continue
		}

		if m.EncryptedSurvivalAnalysis[i] != nil {
			if err := m.EncryptedSurvivalAnalysis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("encryptedSurvivalAnalysis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var exploreQueryResultElementTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","pending","error","available"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exploreQueryResultElementTypeStatusPropEnum = append(exploreQueryResultElementTypeStatusPropEnum, v)
	}
}

const (

	// ExploreQueryResultElementStatusQueued captures enum value "queued"
	ExploreQueryResultElementStatusQueued string = "queued"

	// ExploreQueryResultElementStatusPending captures enum value "pending"
	ExploreQueryResultElementStatusPending string = "pending"

	// ExploreQueryResultElementStatusError captures enum value "error"
	ExploreQueryResultElementStatusError string = "error"

	// ExploreQueryResultElementStatusAvailable captures enum value "available"
	ExploreQueryResultElementStatusAvailable string = "available"
)

// prop value enum
func (m *ExploreQueryResultElement) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, exploreQueryResultElementTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExploreQueryResultElement) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ExploreQueryResultElement) validateTimers(formats strfmt.Registry) error {

	if swag.IsZero(m.Timers) { // not required
		return nil
	}

	for i := 0; i < len(m.Timers); i++ {
		if swag.IsZero(m.Timers[i]) { // not required
			continue
		}

		if m.Timers[i] != nil {
			if err := m.Timers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreQueryResultElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreQueryResultElement) UnmarshalBinary(b []byte) error {
	var res ExploreQueryResultElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExploreQueryResultElementEncryptedSurvivalAnalysisItems0 explore query result element encrypted survival analysis items0
// swagger:model ExploreQueryResultElementEncryptedSurvivalAnalysisItems0
type ExploreQueryResultElementEncryptedSurvivalAnalysisItems0 struct {

	// timecode
	Timecode string `json:"timecode,omitempty"`

	// timepoint
	Timepoint *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint `json:"timepoint,omitempty"`
}

// Validate validates this explore query result element encrypted survival analysis items0
func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimepoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0) validateTimepoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Timepoint) { // not required
		return nil
	}

	if m.Timepoint != nil {
		if err := m.Timepoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timepoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0) UnmarshalBinary(b []byte) error {
	var res ExploreQueryResultElementEncryptedSurvivalAnalysisItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint explore query result element encrypted survival analysis items0 timepoint
// swagger:model ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint
type ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint struct {

	// censoringevent
	Censoringevent string `json:"censoringevent,omitempty"`

	// eventofinterest
	Eventofinterest string `json:"eventofinterest,omitempty"`
}

// Validate validates this explore query result element encrypted survival analysis items0 timepoint
func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint) UnmarshalBinary(b []byte) error {
	var res ExploreQueryResultElementEncryptedSurvivalAnalysisItems0Timepoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExploreQueryResultElementTimersItems0 explore query result element timers items0
// swagger:model ExploreQueryResultElementTimersItems0
type ExploreQueryResultElementTimersItems0 struct {

	// milliseconds
	// Required: true
	Milliseconds *int64 `json:"milliseconds"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this explore query result element timers items0
func (m *ExploreQueryResultElementTimersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExploreQueryResultElementTimersItems0) validateMilliseconds(formats strfmt.Registry) error {

	if err := validate.Required("milliseconds", "body", m.Milliseconds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreQueryResultElementTimersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreQueryResultElementTimersItems0) UnmarshalBinary(b []byte) error {
	var res ExploreQueryResultElementTimersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
