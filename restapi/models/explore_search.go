// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExploreSearch explore search
//
// swagger:model exploreSearch
type ExploreSearch struct {

	// path
	// Required: true
	// Pattern: ^\/$|^((\/[^\/]+)+\/?)$
	Path *string `json:"path"`

	// type
	// Enum: [children metadata]
	Type string `json:"type,omitempty"`
}

// Validate validates this explore search
func (m *ExploreSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExploreSearch) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	if err := validate.Pattern("path", "body", string(*m.Path), `^\/$|^((\/[^\/]+)+\/?)$`); err != nil {
		return err
	}

	return nil
}

var exploreSearchTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["children","metadata"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exploreSearchTypeTypePropEnum = append(exploreSearchTypeTypePropEnum, v)
	}
}

const (

	// ExploreSearchTypeChildren captures enum value "children"
	ExploreSearchTypeChildren string = "children"

	// ExploreSearchTypeMetadata captures enum value "metadata"
	ExploreSearchTypeMetadata string = "metadata"
)

// prop value enum
func (m *ExploreSearch) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exploreSearchTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExploreSearch) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExploreSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExploreSearch) UnmarshalBinary(b []byte) error {
	var res ExploreSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
